plugins {
    id 'java' // Добавляет поддержку для Java.
    id 'org.springframework.boot' version '2.6.2' // Плагин Spring Boot, который упрощает создание и управление Spring приложениями.
    id "io.spring.dependency-management" version "1.1.5" // Позволяет управлять зависимостями, обеспечивая совместимость и версионность.
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // Плагин для поддержки QueryDSL в Gradle, который позволяет генерировать классы для построения запросов к базе данных.
    id "io.freefair.lombok" version "8.6" // Плагин для интеграции библиотеки Lombok, которая позволяет избежать повторяющегося кода, связанного с геттерами, сеттерами и другими часто используемыми шаблонами.
}
apply from: 'version.gradle'

group 'org.example' // - group: Указывает организацию или компанию (например, org.example).
version '1.0-SNAPSHOT' // - version: Указывает версию проекта.

repositories {
    mavenCentral() // - mavenCentral(): Указывает, что зависимости будут загружаться из центрального репозитория Maven.
}

configurations {
    querydsl.extendsFrom annotationProcessor, implementation, compileOnly, runtimeOnly // - querydsl.extendsFrom ...: Конфигурация для QueryDSL, которая определяет, что он расширяет другие конфигурации для хранения зависимостей.
}

dependencies {
    implementation project(':common-loging-starter')
    implementation 'org.springframework.boot:spring-boot-starter' // Основная зависимость Spring Boot.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.2' // Поддержка JPA в Spring.
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation' // валидация
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5' // Доступ к данным аутентификации и авторизации
    implementation "org.springdoc:springdoc-openapi-ui:${versions.springdoc}" // swagger
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-jose'

    annotationProcessor 'org.projectlombok:lombok:1.18.30' // Указываем Lombok
    annotationProcessor 'com.querydsl:querydsl-apt' // Зависимость для аннотированных процессоров, которая генерирует классы QueryDSL.

    implementation 'org.postgresql:postgresql' // Драйвер для работы с PostgreSQL.
    implementation 'org.springframework.data:spring-data-envers' // Библиотека для отслеживания изменений данных.
    implementation 'com.querydsl:querydsl-jpa' // Библиотека для работы с QueryDSL.
    implementation 'org.liquibase:liquibase-core'


    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Зависимость для тестирования.
    testImplementation 'org.springframework.security:spring-security-test' // тест аутентифицириваного пользователя
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
}

querydsl {
    jpa = true // Указывает конфигурацию JPA для QueryDSL.
    library = "com.querydsl:querydsl-apt:${versions.querydsl}" // Задает библиотеку для аннотационного процессора.
    querydslSourcesDir = "$buildDir/generated/sources/annotationProcessor/java/main" // Указывает директорию, куда будут генерироваться исходные файлы QueryDSL.
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion '8.5'
}

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}